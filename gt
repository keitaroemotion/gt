#!/usr/bin/env python

import os 
import subprocess
import sys

def system(command):
    return subprocess.check_output(command.split())

def git(args):
    return system(reduce(lambda x, y: x + y, args, "git "))

def parse_logs():
    logs = git("log")
    commits = [get_commit(x) for x
                   in logs.split("\n")
                   if x.startswith("commit ")]
    messages = parse([get_messages(x) for x in logs.split("commit ") if len(x) > 0])
    i = 0
    for sub_commits in parse(commits):
        parse_log(logs, sub_commits, messages[i])
        i = i + 1

def parse(arr):
    return [arr[i:i+5] for i in range(0,len(arr),5)]               


def parse_log(logs, commits, messages):
    [puts(x) for x in zip(range(0,len(commits)), commits, messages)]
    user_input = raw_input("number[q:quit]: ")
    if user_input.isdigit():
       commit_num = commits[int(user_input)]
       copy_to_clipboard(commit_num)
    if user_input == "q":
       sys.exit("done.")

def copy_to_clipboard(text):
    os.system("echo '%s' | pbcopy" % text)

def puts(x):
    print "{}: {} {}".format(x[0], x[1], reduce(lambda x, y: x + y, x[2]))[0:70] + ".."
    return x

def is_commit_message(line):
    return not (line.startswith("Author: ") or line.startswith("Date: ") or line == "")

def get_messages(line):
    return  [x.strip() for x in line.split("\n") if is_commit_message(x) ][1:] 

def get_commit(x):
    return x.strip("commit").strip()[0:9]

def help():
    return "\ngt [lc] ... copy target log commit number to clopboard\n"


if len(sys.argv) < 2:
    sys.exit("\nyou need argument\n" + help()) 

option = sys.argv[1]

if option == "lc":
    parse_logs()
